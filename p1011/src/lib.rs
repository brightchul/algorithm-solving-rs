//! # p1011
//!
//! 1011번 Fly me to the Alpha Centauri 성공
//!
//! 그가 탑승하게 될 우주선은 Alpha Centauri라는 새로운 인류의 보금자리를 개척하기 위한 대규모 생활 유지 시스템을 탑재하고 있기 때문에, 그 크기와 질량이 엄청난 이유로 최신기술력을 총 동원하여 개발한 공간이동 장치를 탑재하였다.
//!
//! 하지만 이 공간이동 장치는 이동 거리를 급격하게 늘릴 경우 기계에 심각한 결함이 발생하는 단점이 있어서, 이전 작동시기에 k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다. 예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며, 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다.
//!
//! ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )
//!
//! <br/>
//!
//! 더 자세한 내용은 [https://www.acmicpc.net/problem/1011](https://www.acmicpc.net/problem/1011) 참고하세요

/// p1011 문제에 대한 해결 함수
///
/// ```text
/// 거리 | 워프 횟수 | 워프 거리
///   1 |    1    | 1
///   2 |    2    | 1 1
///   3 |    3    | 1 1 1
///   4 |    3    | 1 2 1
/// -----------------------------
///   5 |    4    | 1 2 1 1
///   6 |    4    | 1 2 2 1
///   7 |    5    | 1 2 2 1 1
///   8 |    5    | 1 2 2 2 1
///   9 |    5    | 1 2 3 2 1
/// -----------------------------
///  10 |    6    | 1 2 3 2 1 1
///  11 |    6    | 1 2 3 2 2 1
///  12 |    6    | 1 2 3 3 2 1
///  13 |    7    | 1 2 3 3 2 1 1
///  14 |    7    | 1 2 3 3 2 2 1
///  15 |    7    | 1 2 3 3 3 2 1
///  16 |    7    | 1 2 3 4 3 2 1
/// -----------------------------
/// ```
/// 이런식으로 변화를 하는데 1, 4, 9, 16 으로 분리가 가능하다.
///
/// 이것은 제곱수인데, 제곱수로 분리된 각구간마다 워프수가 1 증가한다.
///
/// 예를 들어 5 ~ 9의 경우 [4,4,5,5,5] 즉 [2개, 3개] 으로 진행된다.
///
/// 앞에 있는 이전 제곱수 입장에서 보자면, 이전제곱수를 l이라고 하면 [sqrt(이전제곱수)+1개, sqrt(이전제곱수)+2개]가 된다.
///
/// 각 제곱수의 워프숫자는 `sqrt(제곱수) * 2 - 1` 이다. 예를 들어 9인 경우 `3 * 2 - 1 = 5` 즉 5개이다.
///
/// 이것을 이용해서 풀면 된다.

pub fn solution(n: i64) -> i64 {
    if n <= 3 {
        return n;
    }
    let almost_sqrt_dis = (n as f64).sqrt().floor() as i64;
    let rest = n - almost_sqrt_dis.pow(2);

    if rest == 0 {
        return almost_sqrt_dis * 2 - 1;
    }
    if rest <= almost_sqrt_dis {
        return almost_sqrt_dis * 2;
    }
    return almost_sqrt_dis * 2 + 1;
}

#[test]
fn p1011_test() {
    assert_eq!(solution(0), 0);
    assert_eq!(solution(1), 1);
    assert_eq!(solution(2), 2);
    assert_eq!(solution(3 - 0), 3);
    assert_eq!(solution(5 - 1), 3);
    assert_eq!(solution(50 - 45), 4);
}
